多态

多态特征

父类或者接口的引用指向或者接收自己的子类对象
子类独有的方法不能使用
好处和作用
多态的存在提高了程序的扩展性和后期的可维护性

需要存在继承或者实现关系
要有覆盖操作

instanceof类型检测

子类不能直接调用自己独有的方法
解决问题：
1类型判断 instanceof关键字(明确告诉计算机实例对象属于哪个类)
实例对象instanceof类------------------实例对象是否属于类--------------返回布尔值
2强制类型转换


object类

所有类的顶层父类，也叫超类，基类
1.hashCode()方法
    哈希码：实例对象在内存存储的散列值
2.equsal()方法

比较两个对象：覆盖掉object类的方法
3比较两个对象是否是一个对象
第一步：先去比较两个对象的hashCode() hashCode()相同,比较equals();hashCode不相同,不用比较equals()
第二步：覆盖掉equals() 方法。